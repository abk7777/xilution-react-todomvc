---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  BaseStackName:
    Type: String
    Default: xilution-todomvc-base
  XilutionApiKey:
    Type: String
    Default: FIXME
  XilutionOrganizationId:
    Type: String
    Default: FIXME

Globals:
  Function:
    Runtime: nodejs8.10
    Environment:
      Variables:
        XilutionApiKey: !Ref XilutionApiKey
        XilutionOrganizationId: !Ref XilutionOrganizationId
    MemorySize: 128
    Timeout: 10
  Api:
    Cors:
      AllowHeaders: "'Content-Type'"
      AllowOrigin: "'*'"

Resources:
  AuthenticateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: xilution-todomvc-authenticate-function
      CodeUri: ../../dist/server/
      Handler: index.doAuthenticate
      Role:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-lambda-execution-role-arn"
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /authenticate
            Method: post

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: xilution-todomvc-register-user-function
      CodeUri: ../../dist/server/
      Handler: index.doRegisterUser
      Role:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-lambda-execution-role-arn"
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /register-user
            Method: post

  VerifyUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: xilution-todomvc-verify-user-function
      CodeUri: ../../dist/server/
      Handler: index.doVerifyUser
      Role:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-lambda-execution-role-arn"
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /verify-user
            Method: post

  FetchTodosFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: xilution-todomvc-fetch-todos-function
      CodeUri: ../../dist/server/
      Handler: index.doFetchTodos
      Role:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-lambda-execution-role-arn"
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /todos
            Method: get

  PutTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: xilution-todomvc-put-todo-function
      CodeUri: ../../dist/server/
      Handler: index.doPutTodo
      Role:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-lambda-execution-role-arn"
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /todo
            Method: put

  GetTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: xilution-todomvc-get-todo-function
      CodeUri: ../../dist/server/
      Handler: index.doGetTodo
      Role:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-lambda-execution-role-arn"
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /todo/{todoId}
            Method: get

  DeleteTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: xilution-todomvc-delete-todo-function
      CodeUri: ../../dist/server/
      Handler: index.doDeleteTodo
      Role:
        Fn::ImportValue:
          Fn::Sub: "${BaseStackName}-lambda-execution-role-arn"
      Events:
        PostResource:
          Type: Api
          Properties:
            Path: /todo/{todoId}
            Method: delete

Outputs:
    ApiURL:
      Description: API endpoint URL for Xilution todo MVC example.
      Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
